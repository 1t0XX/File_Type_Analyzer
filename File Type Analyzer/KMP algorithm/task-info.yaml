type: edu
custom_name: stage2
files:
- name: src/analyzer/Main.java
  visible: true
  text: |-
    package analyzer;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;

    public class Main {
        public static void main(String[] args) {
            if (args == null || args.length != 3) {
                System.err.println("No args or wrong number of args provided!");
                return;
            }
            String fName = args[0];
            byte[] pattern = args[1].getBytes();
            int patLen = pattern.length;
            String fType = args[2];
            String unknown = "Unknown file type";

            byte[] allBytes;

            boolean found = false;

            try {
                allBytes = Files.readAllBytes(Paths.get(fName));
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }

            for (int i = 0; i < allBytes.length - patLen; i++) {
                if (allBytes[i] == pattern[0]) {
                    if (checkTheRest(allBytes, i + 1, pattern, 1)) {
                        found = true;
                        break;
                    }
                }
            } // for
            System.out.println(found ? fType : unknown);
        } // psv main()

        static boolean checkTheRest(byte[] arr, int ai, byte[] pat, int pi) { // ai - array index, pi - pattern index
            for (int i = 0; i < pat.length - pi; i++) {
                if (arr[ai + i] != pat[pi + i])
                    return false;
            }
            return true;
        }
    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |
    public class Clue {
        public String response;

        public Clue(String response) {
            this.response = response;
        }
    }
  learner_created: false
- name: test/ContainsSearch.java
  visible: false
  text: |
    public class ContainsSearch {
        public static long searchForPattern(String[] args) {
            String pattern = args[1];
            String patternName = args[2];
            String fileContent = args[0];
            String unknownFileType = "Unknown file type";
            long timeStart = System.nanoTime();
            if (fileContent.contains(pattern) /*!kmpSearch(fileContent.toString(), pattern).isEmpty()*/) {
                return System.nanoTime() - timeStart;
            }
            return 0;
        }
    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.BeforeClass;

    import java.util.List;

    public class MainTest extends StageTest<Clue> {
        static String largeContent;

        String pdf = "PDF document";
        String doc = "DOC document";
        String unknown = "Unknown file type";
        String file = "doc.pdf";

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .addArguments(new String[] {
                            "--naive",
                            file,
                            "%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF-",
                            pdf
                        })
                    .addFile(file, largeContent)
                    .setAttach(new Clue(pdf)),

                new TestCase<Clue>()
                    .addArguments(new String[] {
                            "--KMP",
                            file,
                            "%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF-",
                            doc
                        })
                    .addFile(file, largeContent)
                    .setAttach(new Clue(doc)),

                new TestCase<Clue>()
                    .addArguments(new String[] {
                            "--naive",
                            file,
                            "%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF+",
                            unknown
                        })
                    .addFile(file, largeContent)
                    .setAttach(new Clue(unknown)),

                new TestCase<Clue>()
                    .addArguments(new String[] {
                            "--KMP",
                            file,
                            "%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF+",
                            unknown
                        })
                    .addFile(file, largeContent)
                    .setAttach(new Clue(unknown))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            reply = reply.strip();

            if (reply.contains(doc) && reply.contains(pdf)) {
                return CheckResult.wrong("There are both \"" + doc + "\" and \"" + pdf + "\"" +
                    " in output, should be only one of them");
            } else if (reply.contains(doc) && reply.contains(unknown)) {
                return CheckResult.wrong("There are both \"" + doc + "\" and \"" + unknown + "\"" +
                    " in output, should be only one of them");
            } else if (reply.contains(pdf) && reply.contains(unknown)) {
                return CheckResult.wrong("There are both \"" + pdf + "\" and \"" + unknown + "\"" +
                    " in output, should be only one of them");
            }

            if (!reply.contains(clue.response)) {
                return CheckResult.wrong("Your output does not contain \"" + clue.response + "\", but should." +
                    "\n\nYour output:\n" + reply);
            }

            if (!reply.contains("seconds")) {
                return CheckResult.wrong("Your output does not contain \"seconds\", but should." +
                    "\n\nYour output:\n" + reply);
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void setLargeContent() {

            StringBuilder content = new StringBuilder();

            for (int i = 0; i< 6000; i++) {
                content.append("%PDF");
            }

            content.append("%PDF-");
            largeContent = content.toString();
        }
    }
  learner_created: false
- name: test/NaiveSearch.java
  visible: false
  text: |2


    public class NaiveSearch {
        public static long searchForPattern(String[] args) {
            String pattern = args[1];
            String fileContent = args[0];
            long timeStart = System.nanoTime();
            if (naiveSearch(fileContent, pattern)) {
                return System.nanoTime() - timeStart;
            }
            return 0;
        }


        public static boolean naiveSearch (String text, String pattern) {
            int textLength = text.length();
            int patternLength = pattern.length();
            for (int i = 0; i<textLength - patternLength + 1; i++) {
                for (int j = 0; j< patternLength; j++) {
                    if (!(text.charAt(i+j) == pattern.charAt(j))) {
                        break;
                    }
                    else if (j == patternLength -1) return true;
                }
            }
            return false;
        }
    }
  learner_created: false
- name: src/analyzer/Algorithm.java
  visible: true
  learner_created: true
- name: src/analyzer/FileType.java
  visible: true
  learner_created: true
- name: src/analyzer/FileTypeAnalyzer.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5486#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 26 Sep 2022 20:07:47 UTC
record: 1
