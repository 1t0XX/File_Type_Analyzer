type: edu
custom_name: stage5
files:
- name: src/analyzer/Main.java
  visible: true
  text: |-
    package analyzer;

    import org.apache.commons.lang3.ArrayUtils;
    import org.apache.commons.lang3.StringUtils;

    import java.io.*;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.*;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Main {
        public static void main(String[] args) throws IOException {

            String algo =(args[0]);
            String inputPath =(args[1]);
            String pattern = args[2];
            String resultString = args[3];

    //        System.out.println(Files.readAllLines(Paths.get(inputPath)));

            byte[] allBytes = Files.readAllBytes(Paths.get(inputPath));
            Byte[] allBytesWrapped = ArrayUtils.toObject(allBytes);
            byte[] bytePattern = pattern.getBytes();
            Byte[] bytePatternWrapped = ArrayUtils.toObject(bytePattern);
            List<Byte> allBytesList = Arrays.asList( allBytesWrapped );
            List<Byte> patternBytesList = Arrays.asList( bytePatternWrapped );
            long t0 = System.nanoTime();


            if (algo.equals("--naive")) {// search by brute force
                if ( Collections.indexOfSubList(allBytesList, patternBytesList) == -1) {
                    System.out.println("Unknown file type");
                } else {
                    System.out.println(resultString);
                }
            } else {// search by KMP
                List<Integer> listOfMatcherIndex = new ArrayList<>();
                int M = patternBytesList.size();
                int N = allBytesList.size();
                int j = 0; // index of prefix function
                List<Integer> lps = PrefixFunction.of(patternBytesList);
                int i = 0;

                while(i < N) {
                    if ( Objects.equals(patternBytesList.get(j), (allBytesList.get(i))) ){
                        j++;
                        i++;
                    }
                    if (j == M) {
                        listOfMatcherIndex.add(i-j);
                        j = lps.get(j-1);
                    } else if (i < N && !Objects.equals(patternBytesList.get(j), allBytesList.get(i))) {
                        if ( j != 0) {
                            j = lps.get(j-1);
                        } else {
                            i = i +1;
                        }
                    }
                }

                if (listOfMatcherIndex.isEmpty()) {
                    System.out.println("Unknown file type");
                } else {
                    System.out.println(resultString);
                }



            }


            long t1 = System.nanoTime();

            System.out.printf("It took %s seconds\n", String.valueOf((double) (t1-t0)/1_000_000_000));
    //        System.out.println(patternPrefixFunction);


        }
    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.Assert;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;

        private static String testFolder = "test_files";
        private static String files = testFolder + File.separator;

        private static String patternsDb = "patterns.db";
        private static final String patterns =
            "1;\"%PDF-\";\"PDF document\"\n" +
                "2;\"pmview\";\"PCP pmview config\"\n" +
                "4;\"PK\";\"Zip archive\"\n" +
                "5;\"vnd.oasis.opendocument.presentation\";\"OpenDocument presentation\"\n" +
                "6;\"W.o.r.d\";\"MS Office Word 2003\"\n" +
                "6;\"P.o.w.e.r.P.o.i\";\"MS Office PowerPoint 2003\"\n" +
                "7;\"word/_rels\";\"MS Office Word 2007+\"\n" +
                "7;\"ppt/_rels\";\"MS Office PowerPoint 2007+\"\n" +
                "7;\"xl/_rels\";\"MS Office Excel 2007+\"\n" +
                "8;\"-----BEGIN\\ CERTIFICATE-----\";\"PEM certificate\"\n" +
                "9;\"ftypjp2\";\"ISO Media JPEG 2000\"\n" +
                "9;\"ftypiso2\";\"ISO Media MP4 Base Media v2\"\n";

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                //Testing basic cases
                //PDF
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "doc.pdf", "PFDF%PDF-PDF")
                    .addFile(files + "text.pdf", "PFPDF-PDFABC")
                    .setAttach(new Clue(
                        "doc.pdf: PDF document",
                        "text.pdf: Unknown file type",
                        "Wrong answer for files with PDF documents")),

                //Zip archive
                new TestCase<Clue>()
                    .addArguments(new String[] {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "doc.zip", "PCK")
                    .addFile(files + "doc1.zip", "PKC")
                    .setAttach(new Clue(
                        "doc.zip: Unknown file type" ,
                        "doc1.zip: Zip archive",
                        "Wrong answer for files with Zip archives")),

                //PCP pmview config
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "main", "pmview")
                    .addFile(files + "main.config", "pmconfigview")
                    .setAttach(new Clue(
                        "main: PCP pmview config",
                        "main.config: Unknown file type",
                        "Wrong answer for PCP pmview config files")),

                //OpenDocument presentation
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "slides1.odp", "vnd.oasis.opendocument.presentation")
                    .addFile(files + "slides2.odp", "vnd.oasis.microsoft.presentation")
                    .setAttach(new Clue(
                        "slides1.odp: OpenDocument presentation",
                        "slides2.odp: Unknown file type",
                        "")),

                //MS Office Word 2003
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "txt.doc", "wwwwwwwwW.o.r.d")
                    .addFile(files + "doc.txt", "W.o.r.kwwwwwwww")
                    .setAttach(new Clue(
                        "doc.txt: Unknown file type",
                        "txt.doc: MS Office Word 2003",
                        "Wrong answer for Word 2003 files")),

                //MS Office PowerPoint 2003
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "slides1.ptp", "P.o.w.e.r.P.o.i")
                    .addFile(files + "slides2.ptp", "P.o.w.e.r.\\Sh.o.i")
                    .setAttach(new Clue(
                        "slides1.ptp: MS Office PowerPoint 2003",
                        "slides2.ptp: Unknown file type",
                        "")),

                //MS Office Word 2007+
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "txt.doc", "\\word/_rels")
                    .addFile(files + "doc.txt", "word/\\_rels")
                    .setAttach(new Clue(
                        "doc.txt: Unknown file type",
                        "txt.doc: MS Office Word 2007+",
                        "Wrong answer for Word 2007+ files")),

                //MS Office PowerPoint 2007+
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "pres1.pptx", "afeefa%ppt/_relsasdad")
                    .addFile(files + "pres2.pptx", "ppasfsfafdaet/_rels")
                    .setAttach(new Clue(
                        "pres1.pptx: MS Office PowerPoint 2007+",
                        "pres2.pptx: Unknown file type",
                        "")),

                //MS Office Excel 2007+
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "sheet1.xls", "asdaxl/_rels")
                    .addFile(files + "sheet2.xls", "x2/_reasdadls")
                    .setAttach(new Clue(
                        "sheet1.xls: MS Office Excel 2007+",
                        "sheet2.xls: Unknown file type",
                        "Wrong answer for Excel 2007+ files")),

                //PEM certificate
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "cert.pem", "\\\\\\\\\\aasdw-----BEGIN\\ CERTIFICATE-----")
                    .addFile(files + "cert_core.pem", "\\\\\\\\\\adww-----BEGIN\\CERTIFICATE-----")
                    .setAttach(new Clue(
                        "cert.pem: PEM certificate",
                        "cert_core.pem: Unknown file type",
                        "")),

                //ISO Media JPEG 2000
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "1.jpg", "ftypjp2ddddddaa")
                    .addFile(files + "2.jpg", "ftypdddjp2dadad")
                    .setAttach(new Clue(
                        "1.jpg: ISO Media JPEG 2000",
                        "2.jpg: Unknown file type",
                        "Wrong answer for ISO Media JPEG 2000 files")),

                //ISO Media MP4 Base Media v2
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "tape.jpg", "ftypiso2mp4")
                    .addFile(files + "tape.mp4", "mp4ffttypiso2")
                    .setAttach(new Clue(
                        "tape.jpg: ISO Media MP4 Base Media v2",
                        "tape.mp4: Unknown file type",
                        "")),

                //Testing patterns priority
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "tape2.jpg", "PK W.o.r.d")
                    .addFile(files + "tape2.mp4", "%PDF-mp4fftypiso2")
                    .setAttach(new Clue(
                        "tape2.jpg: MS Office Word 2003",
                        "tape2.mp4: ISO Media MP4 Base Media v2",
                        "Wrong answer white testing priority")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "tape3.jpg", "-----BEGIN\\ CERTIFICATE-----pmview")
                    .addFile(files + "tape3.mp4", "%PDF-ftypppfW.o.r.dftypiso")
                    .setAttach(new Clue(
                        "tape3.jpg: PEM certificate",
                        "tape3.mp4: MS Office Word 2003",
                        ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            String actual = reply.strip();

            if (!actual.contains(clue.first)) {
                return CheckResult.wrong(
                    clue.feedback + "\n\n" +
                        "Cannot find a line " + clue.first + "\nYour output:\n" + actual
                );
            }

            if (!actual.contains(clue.second)) {
                return CheckResult.wrong(
                    clue.feedback + "\n\n" +
                        "Cannot find a line " + clue.second + "\nYour output:\n" + actual
                );
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {

            deleteTestFilesDirectory();

            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));
            }
            catch (IOException ex) {

            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + testFolder));
            }
            catch (IOException ex) {

            }
        }


        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));
            }
            catch (IOException ex) {


            }
        }

    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |2

    public class Clue {
        public String first;
        public String second;
        public String feedback;

        public Clue(String first, String second, String feedback) {
            this.first = first;
            this.second = second;
            this.feedback = feedback;
        }
    }
  learner_created: false
- name: src/analyzer/Algorithm.java
  visible: true
  text: |-
    package analyzer;

    public enum Algorithm {
        NAIVE("--naive"),
        KMP("--KMP"),
        UNKNOWN_ALGORITHM("Unknown algorithm");

        private final String algorithmName;

        Algorithm(String algorithmName) {
            this.algorithmName = algorithmName;
        }

        public String getAlgorithmName() {
            return algorithmName;
        }

        public static Algorithm valueFrom(String algorithmName) {
            for (Algorithm algorithm : values()) {
                if (algorithmName.equalsIgnoreCase(algorithm.getAlgorithmName())) {
                    return algorithm;
                }
            }
            return UNKNOWN_ALGORITHM;
        }
    }
  learner_created: true
- name: src/analyzer/FileTypeAnalyzer.java
  visible: true
  text: |
    package analyzer;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.List;
    import java.util.Objects;
    import java.util.concurrent.Callable;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.Future;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    public class FileTypeAnalyzer {
        private static final ExecutorService EXECUTOR = Executors.newFixedThreadPool(10);

        public String analyzeFile(String algorithm, String filePath, String pattern, String result) throws IOException {
            //            case KMP -> analyzeUsingCollections(filePath, pattern, result);
            switch (Algorithm.valueFrom(algorithm)) {
                case NAIVE:
                    return analyzeNaive(filePath, pattern, result);
                case KMP:
                    return analyzeKMP(filePath, pattern, result);
                case UNKNOWN_ALGORITHM:
                    return FileType.UNKNOWN_FILE_TYPE.getResultString();
                default:
                    throw new IllegalArgumentException();
            }
        }

        public List<FileResult> analyzeFilesAsyncWithDb(String folderPath, String dbPath) throws IOException, InterruptedException {
            List<PatternInfo> patternInfoList = initDb(dbPath);

            File folder = new File(folderPath);
            File[] files = folder.listFiles();
            List<AnalyzerDb> analyzers = Arrays.stream(Objects.requireNonNull(files))
                    .map(it -> new AnalyzerDb(it, patternInfoList))
                    .collect(Collectors.toList());

            List<Future<FileResult>> futures = EXECUTOR.invokeAll(analyzers);
            EXECUTOR.shutdown();

            return futures.stream()
                    .map(future -> {
                        try {
                            return future.get();
                        } catch (Exception e) {
                            e.printStackTrace();
                            return new FileResult();
                        }
                    })
                    .collect(Collectors.toList());
        }

        private List<PatternInfo> initDb(String dbPath) throws IOException {
            List<String> strings = Files.readAllLines(Path.of(dbPath));
            return strings.stream()
                    .map(line -> line.split(";"))
                    .map(FileTypeAnalyzer::buildPatternInfo)
                    .collect(Collectors.toList());
        }

        public List<FileResult> analyzeFilesAsync(String folderPath, String pattern, String resultString) throws InterruptedException {
            File folder = new File(folderPath);
            File[] files = folder.listFiles();
            List<Analyzer> analyzers = Arrays.stream(Objects.requireNonNull(files))
                    .map(file -> new Analyzer(file, pattern, resultString))
                    .collect(Collectors.toList());

            List<Future<FileResult>> futures = EXECUTOR.invokeAll(analyzers);
            EXECUTOR.shutdown();

            return futures.stream()
                    .map(future -> {
                        try {
                            return future.get();
                        } catch (Exception e) {
                            e.printStackTrace();
                            return new FileResult();
                        }
                    })
                    .collect(Collectors.toList());
        }

        private String analyzeKMPWithDb(String filePath, List<PatternInfo> patternInfoList) {
            try {
                String target = new String(Files.readAllBytes(Path.of(filePath)));
                return patternInfoList.stream()
                        .filter(it -> findPatternInText(it.getPattern(), target) >= 0)
                        .max(Comparator.comparing(PatternInfo::getPriority))
                        .map(PatternInfo::getResultString)
                        .orElse(FileType.UNKNOWN_FILE_TYPE.getResultString());
            } catch (IOException e) {
                e.printStackTrace();
                return FileType.UNKNOWN_FILE_TYPE.getResultString();
            }
        }

        private String analyzeKMP(String filePath, String pattern, String result) {
            try {
                String target = new String(Files.readAllBytes(Path.of(filePath)));
                if (findPatternInText(pattern, target) < 0) {
                    return FileType.UNKNOWN_FILE_TYPE.getResultString();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return result;
        }

        private int findPatternInText(String pattern, String text) {
            int index = -1;
            int patternLength = pattern.length();
            int textLength = text.length();
            char[] textCharArray = text.toCharArray();
            char[] patternArray = pattern.toCharArray();

            int[] suffixArray = generateSuffixArray(patternLength, pattern);

            int i = 0;
            boolean isMatched = true;
            int j = 0;
            while (j < patternLength && i < textLength) {
                if (textCharArray[i] == patternArray[j]) {
                    j = j + 1;
                    i = i + 1;
                } else {
                    int newIndex = i - j + 1;
                    isMatched = false;
                    j = j - 1;
                    if (j < 0) {
                        j = 0;
                    }
                    j = suffixArray[j];
                    if (j == 0) {
                        i = newIndex;
                    } else {
                        i = i + 1;
                    }
                }

                if (j == patternLength) {
                    isMatched = true;
                }

            }
            if (isMatched) {
                index = i - patternLength;
            }

            return index;
        }

        private static int[] generateSuffixArray(int patternLength, String pattern) {
            int[] suffixArray = new int[patternLength];
            char[] patternArray = pattern.toCharArray();
            int i = 1;
            while (i < patternLength) {
                for (int j = 0; j < patternLength; j++) {
                    if ((i < patternLength) && (patternArray[i] == patternArray[j])) {
                        suffixArray[i] = j + 1;
                        i = i + 1;
                    } else {
                        i = i + 1;
                        break;
                    }

                    if (i == patternLength - 1) {
                        break;
                    }
                }

            }

            return suffixArray;
        }

        private String analyzeNaive(String filePath, String pattern, String result) throws IOException {
            System.out.println("Using Naive");
            String text = new String(Files.readAllBytes(Path.of(filePath)));
            if (naiveSearch(text, pattern)) {
                return result;
            } else {
                return FileType.UNKNOWN_FILE_TYPE.getResultString();
            }
        }

        private boolean naiveSearch(String text, String pattern) {
            int textLength = text.length();
            int patternLength = pattern.length();
            for (int i = 0; i < textLength - patternLength + 1; i++) {
                for (int j = 0; j < patternLength; j++) {
                    if (!(text.charAt(i + j) == pattern.charAt(j))) {
                        break;
                    } else if (j == patternLength - 1) {
                        return true;
                    }
                }
            }
            return false;
        }

        private String analyzeUsingCollections(String filePath, String pattern, String result) throws IOException {
            byte[] fileByteArray = Files.readAllBytes(Path.of(filePath));
            byte[] patternByteArray = pattern.getBytes();
            List<Byte> fileByteList = convertToList(fileByteArray);
            List<Byte> patternByteList = convertToList(patternByteArray);
            if (Collections.indexOfSubList(fileByteList, patternByteList) < 0) {
                return FileType.UNKNOWN_FILE_TYPE.getResultString();
            } else {
                return result;
            }
        }

        private List<Byte> convertToList(byte[] byteArray) {
            return IntStream.range(0, byteArray.length)
                    .mapToObj(i -> byteArray[i])
                    .collect(Collectors.toList());
        }

        private static PatternInfo buildPatternInfo(String[] array) {
            int priority = Integer.parseInt(array[0]);
            String pattern = array[1].substring(1, array[1].length() - 1);
            String resultString = array[2].substring(1, array[2].length() - 1);
            return new PatternInfo(priority, pattern, resultString);
        }

        class Analyzer implements Callable<FileResult> {
            private final File file;
            private final String pattern;
            private final String resultString;

            Analyzer(File file, String pattern, String resultString) {
                this.file = file;
                this.pattern = pattern;
                this.resultString = resultString;
            }

            @Override
            public FileResult call() {
                String output = analyzeKMP(file.getPath(), pattern, resultString);
                return new FileResult(file.getName(), output);
            }
        }

        class AnalyzerDb implements Callable<FileResult> {
            private final File file;
            private final List<PatternInfo> patternInfoList;

            AnalyzerDb(File file, List<PatternInfo> patternInfoList) {
                this.file = file;
                this.patternInfoList = patternInfoList;
            }

            @Override
            public FileResult call() {
                String output = analyzeKMPWithDb(file.getPath(), patternInfoList);
                return new FileResult(file.getName(), output);
            }
        }
    }
  learner_created: true
- name: src/analyzer/PatternInfo.java
  visible: true
  text: |
    package analyzer;

    public class PatternInfo {
        private final int priority;
        private final String pattern;
        private final String resultString;

        public PatternInfo(int priority, String pattern, String resultString) {
            this.priority = priority;
            this.pattern = pattern;
            this.resultString = resultString;
        }

        public int getPriority() {
            return priority;
        }

        public String getPattern() {
            return pattern;
        }

        public String getResultString() {
            return resultString;
        }
    }
  learner_created: true
- name: src/analyzer/FileType.java
  visible: true
  text: |
    package analyzer;

    public enum FileType {
        PDF("PDF document"),
        PEM("PEM certificate"),
        DOC("DOC document"),
        UNKNOWN_FILE_TYPE("Unknown file type");

        private final String resultString;

        FileType(String resultString) {
            this.resultString = resultString;
        }

        public String getResultString() {
            return resultString;
        }

        public static FileType valueFrom(String fileType) {
            for (FileType type : values()) {
                if (fileType.equalsIgnoreCase(type.getResultString())) {
                    return type;
                }
            }
            return UNKNOWN_FILE_TYPE;
        }
    }
  learner_created: true
- name: src/analyzer/FileResult.java
  visible: true
  text: |
    package analyzer;

    public class FileResult {
        private String fileName;
        private String fileType;

        public FileResult() {
        }

        public FileResult(String fileName, String fileType) {
            this.fileName = fileName;
            this.fileType = fileType;
        }

        public String getFileName() {
            return fileName;
        }

        public String getFileType() {
            return fileType;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5489#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 28 Sep 2022 19:49:19 UTC
record: -1
